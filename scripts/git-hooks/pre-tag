#!/bin/bash
# Git pre-tag hook - runs before creating any git tag
# Enforces release hygiene requirements

TAG_NAME="$1"

# Only check version tags
if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then
    # Not a version tag, allow it
    exit 0
fi

echo "🔍 Checking release hygiene for tag: $TAG_NAME"

# Determine if this is RC or final release
if [[ "$TAG_NAME" =~ -rc[0-9]+$ ]]; then
    echo "📦 RC tag detected - running comprehensive hygiene checks..."
    IS_RC=true
else
    echo "🚀 Final release tag detected - verifying RC passed..."
    IS_RC=false
fi

# ============================================
# For RC tags: Run ALL hygiene checks
# ============================================
if [ "$IS_RC" = true ]; then
    FAILED_CHECKS=0
    WARNINGS=0

    # Create results file
    RESULTS_FILE=".hygiene-check-results-${TAG_NAME}.txt"
    echo "Hygiene Check Results for $TAG_NAME" > "$RESULTS_FILE"
    echo "Generated: $(date)" >> "$RESULTS_FILE"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" >> "$RESULTS_FILE"
    echo "" >> "$RESULTS_FILE"

    # Helper function to run check and capture output
    run_check() {
        local check_num="$1"
        local check_name="$2"
        local check_cmd="$3"
        local is_critical="${4:-false}"  # Default to non-critical

        echo "$check_num. $check_name..." | tee -a "$RESULTS_FILE"

        local output
        if output=$(eval "$check_cmd" 2>&1); then
            echo "   ✅ Passed" | tee -a "$RESULTS_FILE"
            echo "$output" >> "$RESULTS_FILE"
            echo "" >> "$RESULTS_FILE"
        else
            if [ "$is_critical" = "true" ]; then
                echo "   ❌ Failed (critical)" | tee -a "$RESULTS_FILE"
                echo "$output" >> "$RESULTS_FILE"
                echo "" >> "$RESULTS_FILE"
                ((FAILED_CHECKS++))
            else
                echo "   ⚠️  Warning (non-blocking)" | tee -a "$RESULTS_FILE"
                echo "$output" >> "$RESULTS_FILE"
                echo "" >> "$RESULTS_FILE"
                ((WARNINGS++))
            fi
        fi
    }

    echo ""
    echo "Running automated checks..."
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    # Check 1: Version sync
    echo "1. Checking version synchronization..."
    if ! ./scripts/check_version_sync.sh > /dev/null 2>&1; then
        echo "   ❌ Version sync failed"
        ((FAILED_CHECKS++))
    else
        echo "   ✅ Version sync passed"
    fi

    # Check 2: All tests pass (unit, integration, e2e)
    echo "2. Running all tests..."
    if ! ./scripts/run_all_tests.sh > /dev/null 2>&1; then
        echo "   ❌ Tests failed"
        ((FAILED_CHECKS++))
    else
        echo "   ✅ All tests passed"
    fi

    # Check 3: Code complexity
    echo "3. Checking code complexity..."
    if ! ./scripts/check_complexity.sh > /dev/null 2>&1; then
        echo "   ❌ Complexity check failed"
        ((FAILED_CHECKS++))
    else
        echo "   ✅ Complexity check passed"
    fi

    # Check 4: Client-server parity
    echo "4. Checking client-server parity..."
    if ! ./scripts/check_client_server_parity.sh > /dev/null 2>&1; then
        echo "   ❌ Parity check failed"
        ((FAILED_CHECKS++))
    else
        echo "   ✅ Parity check passed"
    fi

    # Check 5: Milestone status
    echo "5. Checking milestone status..."
    VERSION=${TAG_NAME%-rc*}

    # Check if milestone exists and has no open issues
    if command -v gh &> /dev/null; then
        MILESTONE_CHECK=$(gh issue list --milestone "$VERSION" --state open --json number 2>/dev/null | jq length)

        if [ "$?" -ne 0 ]; then
            echo "   ⚠️  Could not check milestone (gh cli issue)"
        elif [ "$MILESTONE_CHECK" != "0" ]; then
            echo "   ❌ Milestone $VERSION has $MILESTONE_CHECK open issues"
            ((FAILED_CHECKS++))
        else
            echo "   ✅ Milestone $VERSION has no open issues"
        fi
    else
        echo "   ⚠️  gh cli not available, skipping milestone check"
    fi

    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""

    # Now run hygiene reviews
    echo "Running hygiene reviews..."
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    # Check 6: Test coverage
    echo "6. Reviewing test coverage..."
    if ./scripts/check_test_coverage.sh > /dev/null 2>&1; then
        echo "   ✅ Test coverage check passed"
    else
        echo "   ⚠️  Test coverage has gaps (see above)"
        # Don't fail on coverage gaps, just warn
    fi

    # Check 7: Documentation completeness
    echo "7. Reviewing documentation..."
    if ./scripts/check_documentation.sh "$VERSION" > /dev/null 2>&1; then
        echo "   ✅ Documentation check passed"
    else
        echo "   ❌ Documentation check failed"
        ((FAILED_CHECKS++))
    fi

    # Check 8: Code quality
    echo "8. Reviewing code quality..."
    if ./scripts/check_code_quality.sh > /dev/null 2>&1; then
        echo "   ✅ Code quality check passed"
    else
        echo "   ⚠️  Code quality has issues (see above)"
        # Don't fail on code quality warnings, just inform
    fi

    # Check 9: Directory organization
    echo "9. Reviewing directory organization..."
    if ./scripts/check_directory_organization.sh > /dev/null 2>&1; then
        echo "   ✅ Directory organization check passed"
    else
        echo "   ⚠️  Directory organization could be improved"
        # Don't fail on organization issues, just warn
    fi

    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""

    # Display results
    if [ $FAILED_CHECKS -gt 0 ]; then
        echo "❌ $FAILED_CHECKS critical check(s) failed"
        echo ""
        echo "Fix issues and try again:"
        echo "  # Fix issues, then:"
        echo "  git tag $TAG_NAME"
        echo ""
        exit 1
    fi

    # ============================================
    # Display summary and prompt for review
    # ============================================
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "Hygiene Check Summary for $TAG_NAME"
    echo ""
    echo "CRITICAL: $FAILED_CHECKS blocking issue(s)"
    echo "WARNINGS: $WARNINGS non-blocking issue(s)"
    echo ""
    echo "Full results saved to: $RESULTS_FILE"
    echo ""

    if [ $WARNINGS -gt 0 ]; then
        echo "⚠️  There are $WARNINGS warning(s) that should be reviewed."
        echo ""
        echo "Review detailed results? (y/n)"
        read -r REVIEW_RESPONSE

        if [ "$REVIEW_RESPONSE" = "y" ] || [ "$REVIEW_RESPONSE" = "Y" ]; then
            less "$RESULTS_FILE"
        fi

        echo ""
        echo "Have you reviewed the warnings and decided they are acceptable? (y/n)"
        read -r ACKNOWLEDGE

        if [ "$ACKNOWLEDGE" != "y" ] && [ "$ACKNOWLEDGE" != "Y" ]; then
            echo "❌ Warnings not acknowledged. Fix issues or acknowledge before proceeding."
            echo ""
            echo "To review later: less $RESULTS_FILE"
            echo "To retry: git tag $TAG_NAME"
            exit 1
        fi
    fi

    echo "✅ All critical checks passed"
    if [ $WARNINGS -gt 0 ]; then
        echo "⚠️  $WARNINGS warnings acknowledged"
    fi
    echo ""
    echo "RC tag will be created. Push to trigger GitHub Actions:"
    echo "  git push origin $TAG_NAME"
    echo ""

    # Allow RC tag creation
    exit 0
fi

# ============================================
# For final release tags: Verify RC exists
# ============================================
if [ "$IS_RC" = false ]; then
    echo ""
    echo "Checking for passing RC tag..."

    # Find the most recent RC tag for this version
    LATEST_RC=$(git tag -l "${TAG_NAME}-rc*" | sort -V | tail -1)

    if [ -z "$LATEST_RC" ]; then
        echo "❌ No RC tag found for ${TAG_NAME}"
        echo ""
        echo "You must create and test an RC tag first:"
        echo "  git tag ${TAG_NAME}-rc1"
        echo "  git push --tags"
        echo "  # Wait for CI to pass"
        echo "  # Then create final release"
        echo ""
        exit 1
    fi

    echo "✅ Found RC tag: $LATEST_RC"
    echo ""
    echo "⚠️  Before creating final release, verify:"
    echo "   - RC tag CI passed on GitHub Actions"
    echo "   - All manual review items addressed"
    echo "   - CHANGELOG.md updated"
    echo "   - No critical issues discovered during RC testing"
    echo ""
    echo "Proceed with final release tag? (y/n)"
    read -r CONFIRM

    if [ "$CONFIRM" != "y" ] && [ "$CONFIRM" != "Y" ]; then
        echo "❌ Release tag cancelled"
        exit 1
    fi

    # Allow final tag
    echo "✅ Creating final release tag: $TAG_NAME"
    exit 0
fi
