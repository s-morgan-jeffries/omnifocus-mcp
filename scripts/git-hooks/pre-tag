#!/bin/bash
# Git pre-tag hook - runs before creating any git tag
# Enforces release hygiene requirements

TAG_NAME="$1"

# Only check version tags
if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then
    # Not a version tag, allow it
    exit 0
fi

echo "🔍 Checking release hygiene for tag: $TAG_NAME"

# Extract version numbers to determine release type
if [[ "$TAG_NAME" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
    MAJOR="${BASH_REMATCH[1]}"
    MINOR="${BASH_REMATCH[2]}"
    PATCH="${BASH_REMATCH[3]}"

    # Determine release type (patch/minor/major)
    if [ "$PATCH" != "0" ]; then
        RELEASE_TYPE="patch"
    elif [ "$MINOR" != "0" ]; then
        RELEASE_TYPE="minor"
    else
        RELEASE_TYPE="major"
    fi
else
    # Couldn't parse version, default to patch
    RELEASE_TYPE="patch"
fi

# Get current branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Determine if this is RC or final release
if [[ "$TAG_NAME" =~ -rc[0-9]+$ ]]; then
    echo "📦 RC tag detected - running comprehensive hygiene checks..."
    IS_RC=true

    # RC tags must be on release/* branches
    if [[ ! "$CURRENT_BRANCH" =~ ^release/ ]]; then
        echo "❌ RC tags must be created on release/* branches"
        echo "   Current branch: $CURRENT_BRANCH"
        echo ""
        echo "Create a release branch first:"
        echo "  git checkout -b release/${TAG_NAME%-rc*}"
        echo "  git tag $TAG_NAME"
        exit 1
    fi

    # ============================================
    # For minor/major releases: Prompt for interactive quality checks
    # ============================================
    if [ "$RELEASE_TYPE" = "minor" ] || [ "$RELEASE_TYPE" = "major" ]; then
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🔍 ${RELEASE_TYPE^} Release Detected: $TAG_NAME"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        echo "${RELEASE_TYPE^} releases require interactive quality checks."
        echo ""
        echo "Required before tagging:"
        echo "  ✓ /doc-quality - Documentation quality assessment"
        echo "  ✓ /code-quality - Code quality review"
        echo "  ✓ /test-coverage - Test coverage analysis"
        echo "  ✓ /directory-check - Directory organization check"
        echo ""
        echo "Have you run all four interactive quality checks? (y/n)"
        read -r QUALITY_CHECKS_DONE

        if [ "$QUALITY_CHECKS_DONE" != "y" ] && [ "$QUALITY_CHECKS_DONE" != "Y" ]; then
            echo ""
            echo "❌ Interactive quality checks required before ${RELEASE_TYPE} release."
            echo ""
            echo "Run these commands in Claude Code:"
            echo "  /doc-quality"
            echo "  /code-quality"
            echo "  /test-coverage"
            echo "  /directory-check"
            echo ""
            echo "Review the results, address critical issues, then retry:"
            echo "  git tag $TAG_NAME"
            echo ""
            exit 1
        fi

        echo ""
        echo "✅ Interactive quality checks confirmed"
        echo ""
    fi
else
    echo "🚀 Final release tag detected - verifying RC passed..."
    IS_RC=false

    # Final tags must be on main
    if [ "$CURRENT_BRANCH" != "main" ]; then
        echo "❌ Final release tags must be created on main branch"
        echo "   Current branch: $CURRENT_BRANCH"
        echo ""
        echo "Merge release branch to main first:"
        echo "  git checkout main"
        echo "  git merge release/${TAG_NAME}"
        echo "  git tag $TAG_NAME"
        exit 1
    fi
fi

# ============================================
# For RC tags: Run ALL hygiene checks
# ============================================
if [ "$IS_RC" = true ]; then
    FAILED_CHECKS=0
    WARNINGS=0

    # Create results file
    RESULTS_FILE=".hygiene-check-results-${TAG_NAME}.txt"
    echo "Hygiene Check Results for $TAG_NAME" > "$RESULTS_FILE"
    echo "Generated: $(date)" >> "$RESULTS_FILE"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" >> "$RESULTS_FILE"
    echo "" >> "$RESULTS_FILE"

    # Helper function to run check and capture output
    run_check() {
        local check_num="$1"
        local check_name="$2"
        local check_cmd="$3"
        local is_critical="${4:-false}"  # Default to non-critical

        echo "$check_num. $check_name..." | tee -a "$RESULTS_FILE"

        local output
        if output=$(eval "$check_cmd" 2>&1); then
            echo "   ✅ Passed" | tee -a "$RESULTS_FILE"
            echo "$output" >> "$RESULTS_FILE"
            echo "" >> "$RESULTS_FILE"
        else
            if [ "$is_critical" = "true" ]; then
                echo "   ❌ Failed (critical)" | tee -a "$RESULTS_FILE"
                echo "$output" >> "$RESULTS_FILE"
                echo "" >> "$RESULTS_FILE"
                ((FAILED_CHECKS++))
            else
                echo "   ⚠️  Warning (non-blocking)" | tee -a "$RESULTS_FILE"
                echo "$output" >> "$RESULTS_FILE"
                echo "" >> "$RESULTS_FILE"
                ((WARNINGS++))
            fi
        fi
    }

    echo ""
    echo "Running automated checks..." | tee -a "$RESULTS_FILE"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | tee -a "$RESULTS_FILE"
    echo "" >> "$RESULTS_FILE"

    # Check 1: Version sync
    echo "1. Checking version synchronization..." | tee -a "$RESULTS_FILE"
    SYNC_OUTPUT=$(./scripts/check_version_sync.sh 2>&1)
    if [ $? -ne 0 ]; then
        echo "   ❌ Version sync failed" | tee -a "$RESULTS_FILE"
        echo "$SYNC_OUTPUT" >> "$RESULTS_FILE"
        ((FAILED_CHECKS++))
    else
        echo "   ✅ Version sync passed" | tee -a "$RESULTS_FILE"
    fi
    echo "" >> "$RESULTS_FILE"

    # Check 2: All tests pass (unit, integration, e2e)
    echo "2. Running all tests..." | tee -a "$RESULTS_FILE"
    TEST_OUTPUT=$(./scripts/run_all_tests.sh 2>&1)
    if [ $? -ne 0 ]; then
        echo "   ❌ Tests failed" | tee -a "$RESULTS_FILE"
        echo "$TEST_OUTPUT" >> "$RESULTS_FILE"
        ((FAILED_CHECKS++))
    else
        echo "   ✅ All tests passed" | tee -a "$RESULTS_FILE"
    fi
    echo "" >> "$RESULTS_FILE"

    # Check 3: Code complexity
    echo "3. Checking code complexity..." | tee -a "$RESULTS_FILE"
    COMPLEXITY_OUTPUT=$(./scripts/check_complexity.sh 2>&1)
    if [ $? -ne 0 ]; then
        echo "   ❌ Complexity check failed" | tee -a "$RESULTS_FILE"
        echo "$COMPLEXITY_OUTPUT" >> "$RESULTS_FILE"
        ((FAILED_CHECKS++))
    else
        echo "   ✅ Complexity check passed" | tee -a "$RESULTS_FILE"
    fi
    echo "" >> "$RESULTS_FILE"

    # Check 4: Client-server parity
    echo "4. Checking client-server parity..." | tee -a "$RESULTS_FILE"
    PARITY_OUTPUT=$(./scripts/check_client_server_parity.sh 2>&1)
    if [ $? -ne 0 ]; then
        echo "   ❌ Parity check failed" | tee -a "$RESULTS_FILE"
        echo "$PARITY_OUTPUT" >> "$RESULTS_FILE"
        ((FAILED_CHECKS++))
    else
        echo "   ✅ Parity check passed" | tee -a "$RESULTS_FILE"
    fi
    echo "" >> "$RESULTS_FILE"

    # Check 5: Milestone status
    echo "5. Checking milestone status..." | tee -a "$RESULTS_FILE"
    VERSION=${TAG_NAME%-rc*}

    # Check if milestone exists and has no open issues
    if command -v gh &> /dev/null; then
        MILESTONE_CHECK=$(gh issue list --milestone "$VERSION" --state open --json number 2>/dev/null | jq length)

        if [ "$?" -ne 0 ]; then
            echo "   ⚠️  Could not check milestone (gh cli issue)" | tee -a "$RESULTS_FILE"
        elif [ "$MILESTONE_CHECK" != "0" ]; then
            echo "   ❌ Milestone $VERSION has $MILESTONE_CHECK open issues" | tee -a "$RESULTS_FILE"
            ((FAILED_CHECKS++))
        else
            echo "   ✅ Milestone $VERSION has no open issues" | tee -a "$RESULTS_FILE"
        fi
    else
        echo "   ⚠️  gh cli not available, skipping milestone check" | tee -a "$RESULTS_FILE"
    fi
    echo "" >> "$RESULTS_FILE"

    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | tee -a "$RESULTS_FILE"
    echo "" >> "$RESULTS_FILE"

    # Check 6: Test coverage (CRITICAL - must be >= 85%)
    echo "6. Checking test coverage..." | tee -a "$RESULTS_FILE"
    COV_OUTPUT=$(./scripts/check_test_coverage.sh 2>&1)
    if [ $? -eq 0 ]; then
        echo "   ✅ Test coverage check passed" | tee -a "$RESULTS_FILE"
    else
        echo "   ❌ Test coverage below 85%" | tee -a "$RESULTS_FILE"
        echo "$COV_OUTPUT" >> "$RESULTS_FILE"
        ((FAILED_CHECKS++))
    fi
    echo "" >> "$RESULTS_FILE"

    # Check 7: ROADMAP.md sync with closed issues
    echo "7. Checking ROADMAP.md sync with closed issues..." | tee -a "$RESULTS_FILE"
    ROADMAP_OUTPUT=$(./scripts/check_roadmap_sync.sh "$VERSION" 2>&1)
    if [ $? -eq 0 ]; then
        echo "   ✅ ROADMAP.md is synced" | tee -a "$RESULTS_FILE"
    else
        echo "   ❌ ROADMAP.md out of sync" | tee -a "$RESULTS_FILE"
        echo "$ROADMAP_OUTPUT" >> "$RESULTS_FILE"
        ((FAILED_CHECKS++))
    fi
    echo "" >> "$RESULTS_FILE"

    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""

    # Display results
    if [ $FAILED_CHECKS -gt 0 ]; then
        # Check if hygiene checks have been reviewed and approved
        APPROVAL_FILE=".hygiene-approved-${TAG_NAME}"
        if [ -f "$APPROVAL_FILE" ]; then
            echo "⚠️  $FAILED_CHECKS critical check(s) failed, but hygiene checks were reviewed and approved"
            echo ""
            echo "Approval file found: $APPROVAL_FILE"
            echo "Proceeding with tag creation..."
            echo ""
        else
            echo "❌ $FAILED_CHECKS critical check(s) failed"
            echo ""
            echo "Review the results in: $RESULTS_FILE"
            echo ""
            echo "Then either:"
            echo "  1. Fix the issues and retry:"
            echo "     git tag $TAG_NAME"
            echo ""
            echo "  2. Review and approve to proceed anyway:"
            echo "     ./scripts/approve_hygiene_checks.sh $TAG_NAME"
            echo "     git tag $TAG_NAME"
            echo ""
            exit 1
        fi
    fi

    # ============================================
    # Compare with previous RC if exists
    # ============================================
    if [[ "$TAG_NAME" =~ -rc([0-9]+)$ ]]; then
        RC_NUM="${BASH_REMATCH[1]}"
        if [ "$RC_NUM" -gt 1 ]; then
            PREV_RC_NUM=$((RC_NUM - 1))
            PREV_RC="${VERSION}-rc${PREV_RC_NUM}"
            PREV_RESULTS=".hygiene-check-results-${PREV_RC}.txt"

            if [ -f "$PREV_RESULTS" ]; then
                echo "" | tee -a "$RESULTS_FILE"
                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | tee -a "$RESULTS_FILE"
                echo "Comparison with $PREV_RC:" | tee -a "$RESULTS_FILE"
                echo "" | tee -a "$RESULTS_FILE"

                # Count warnings in previous RC
                PREV_WARNINGS=$(grep -c "⚠️" "$PREV_RESULTS" || echo "0")
                PREV_FAILURES=$(grep -c "❌" "$PREV_RESULTS" || echo "0")

                echo "Previous RC: $PREV_FAILURES critical, $PREV_WARNINGS warnings" | tee -a "$RESULTS_FILE"
                echo "This RC:     $FAILED_CHECKS critical, $WARNINGS warnings" | tee -a "$RESULTS_FILE"
                echo "" | tee -a "$RESULTS_FILE"

                if [ "$WARNINGS" -lt "$PREV_WARNINGS" ]; then
                    IMPROVEMENT=$((PREV_WARNINGS - WARNINGS))
                    echo "✅ Improved: $IMPROVEMENT fewer warnings" | tee -a "$RESULTS_FILE"
                elif [ "$WARNINGS" -gt "$PREV_WARNINGS" ]; then
                    REGRESSION=$((WARNINGS - PREV_WARNINGS))
                    echo "⚠️  Regression: $REGRESSION more warnings" | tee -a "$RESULTS_FILE"
                else
                    echo "➡️  No change in warning count" | tee -a "$RESULTS_FILE"
                fi
                echo "" >> "$RESULTS_FILE"
            fi
        fi
    fi

    # ============================================
    # Display summary and prompt for review
    # ============================================
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "Hygiene Check Summary for $TAG_NAME"
    echo ""
    echo "CRITICAL: $FAILED_CHECKS blocking issue(s)"
    echo "WARNINGS: $WARNINGS non-blocking issue(s)"
    echo ""
    echo "Full results saved to: $RESULTS_FILE"
    echo ""

    if [ $WARNINGS -gt 0 ]; then
        echo "⚠️  There are $WARNINGS warning(s) that should be reviewed."
        echo ""
        echo "Review detailed results? (y/n)"
        read -r REVIEW_RESPONSE

        if [ "$REVIEW_RESPONSE" = "y" ] || [ "$REVIEW_RESPONSE" = "Y" ]; then
            less "$RESULTS_FILE"
        fi

        echo ""
        echo "Have you reviewed the warnings and decided they are acceptable? (y/n)"
        read -r ACKNOWLEDGE

        if [ "$ACKNOWLEDGE" != "y" ] && [ "$ACKNOWLEDGE" != "Y" ]; then
            echo "❌ Warnings not acknowledged. Fix issues or acknowledge before proceeding."
            echo ""
            echo "To review later: less $RESULTS_FILE"
            echo "To retry: git tag $TAG_NAME"
            exit 1
        fi
    fi

    echo "✅ All critical checks passed"
    if [ $WARNINGS -gt 0 ]; then
        echo "⚠️  $WARNINGS warnings acknowledged"
    fi
    echo ""
    echo "RC tag will be created. Push to trigger GitHub Actions:"
    echo "  git push origin $TAG_NAME"
    echo ""

    # Allow RC tag creation
    exit 0
fi

# ============================================
# For final release tags: Verify RC exists
# ============================================
if [ "$IS_RC" = false ]; then
    echo ""
    echo "Checking for passing RC tag..."

    # Find the most recent RC tag for this version
    LATEST_RC=$(git tag -l "${TAG_NAME}-rc*" | sort -V | tail -1)

    if [ -z "$LATEST_RC" ]; then
        echo "❌ No RC tag found for ${TAG_NAME}"
        echo ""
        echo "You must create and test an RC tag first:"
        echo "  git tag ${TAG_NAME}-rc1"
        echo "  git push --tags"
        echo "  # Wait for CI to pass"
        echo "  # Then create final release"
        echo ""
        exit 1
    fi

    echo "✅ Found RC tag: $LATEST_RC"
    echo ""
    echo "⚠️  Before creating final release, verify:"
    echo "   - RC tag CI passed on GitHub Actions"
    echo "   - All manual review items addressed"
    echo "   - CHANGELOG.md updated"
    echo "   - No critical issues discovered during RC testing"
    echo ""
    echo "Proceed with final release tag? (y/n)"
    read -r CONFIRM

    if [ "$CONFIRM" != "y" ] && [ "$CONFIRM" != "Y" ]; then
        echo "❌ Release tag cancelled"
        exit 1
    fi

    # Allow final tag
    echo "✅ Creating final release tag: $TAG_NAME"
    exit 0
fi
